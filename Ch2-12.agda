{-# OPTIONS --without-K #-}

module Ch2-12 {‚Ñì} {‚Ñì'} where
open import Level using (Lift)
open import Ch2-11 public

--2.12

code : {A : Set ‚Ñì} {B : Set ‚Ñì'} {a‚ÇÄ : A} ‚Üí A + B ‚Üí Set ‚Ñì
code {a‚ÇÄ = a‚ÇÄ} (inl a) = a‚ÇÄ ‚â° a
code {a‚ÇÄ = a‚ÇÄ} (inr b) = Lift ùüò

encode : {A : Set ‚Ñì} {B : Set ‚Ñì'} {a‚ÇÄ : A} (x : A + B) (p : inl a‚ÇÄ ‚â° x)
       ‚Üí code {a‚ÇÄ = a‚ÇÄ} x
encode {A} {B} {a‚ÇÄ} x p = transport code p (refl a‚ÇÄ)

decode : {A : Set ‚Ñì} {B : Set ‚Ñì'} {a‚ÇÄ : A} (x : A + B) (c : code {a‚ÇÄ = a‚ÇÄ} x)
       ‚Üí inl a‚ÇÄ ‚â° x
decode {a‚ÇÄ = a‚ÇÄ} (inl a) c = ap inl c
decode {a‚ÇÄ = a‚ÇÄ} (inr b) c = recùüò (inl a‚ÇÄ ‚â° inr b) (Level.lower c)

decode‚àòencode~id : {A : Set ‚Ñì} {B : Set ‚Ñì'} {a‚ÇÄ : A} (x : A + B) (p : inl a‚ÇÄ ‚â° x)
                 ‚Üí decode x (encode x p) ‚â° p
decode‚àòencode~id {A = A} {a‚ÇÄ = a‚ÇÄ} x p =
                 ind‚â°' (inl a‚ÇÄ) (Œª x‚ÇÅ p‚ÇÅ ‚Üí decode x‚ÇÅ (encode x‚ÇÅ p‚ÇÅ) ‚â° p‚ÇÅ)
                       (refl (refl (inl a‚ÇÄ))) x p

encode‚àòdecode~id : {A : Set ‚Ñì} {B : Set ‚Ñì'} {a‚ÇÄ : A} (x : A + B) (c : code {a‚ÇÄ = a‚ÇÄ} x)
                 ‚Üí encode x (decode x c) ‚â° c
encode‚àòdecode~id (inl a) c = {!!}
encode‚àòdecode~id (inr b) c = recùüò (encode (inr b) (decode (inr b) c) ‚â° c) (Level.lower c)
